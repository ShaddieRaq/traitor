import React, { useState } from 'react';
import { HelpCircle, X, ChevronRight } from 'lucide-react';

interface TooltipProps {
  content: string;
  children: React.ReactNode;
  position?: 'top' | 'bottom' | 'left' | 'right';
  className?: string;
}

interface HelpModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  sections: Array<{\n    title: string;\n    content: string;\n    examples?: string[];\n  }>;\n}\n\n/**\n * Contextual Help System - Addresses UX issue of steep learning curve\n * \n * Provides tooltips and detailed help modals for complex trading concepts\n * and AI intelligence features.\n */\nexport const ContextualTooltip: React.FC<TooltipProps> = ({\n  content,\n  children,\n  position = 'top',\n  className = ''\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const getPositionClasses = () => {\n    switch (position) {\n      case 'top':\n        return 'bottom-full left-1/2 transform -translate-x-1/2 mb-2';\n      case 'bottom':\n        return 'top-full left-1/2 transform -translate-x-1/2 mt-2';\n      case 'left':\n        return 'right-full top-1/2 transform -translate-y-1/2 mr-2';\n      case 'right':\n        return 'left-full top-1/2 transform -translate-y-1/2 ml-2';\n    }\n  };\n\n  return (\n    <div \n      className={`relative inline-block ${className}`}\n      onMouseEnter={() => setIsVisible(true)}\n      onMouseLeave={() => setIsVisible(false)}\n    >\n      {children}\n      {isVisible && (\n        <div className={`\n          absolute z-50 px-3 py-2 text-sm text-white bg-gray-900 rounded-lg shadow-lg\n          max-w-xs whitespace-normal\n          ${getPositionClasses()}\n        `}>\n          {content}\n          <div className={`\n            absolute w-2 h-2 bg-gray-900 transform rotate-45\n            ${position === 'top' ? 'top-full left-1/2 -translate-x-1/2 -mt-1' : ''}\n            ${position === 'bottom' ? 'bottom-full left-1/2 -translate-x-1/2 -mb-1' : ''}\n            ${position === 'left' ? 'left-full top-1/2 -translate-y-1/2 -ml-1' : ''}\n            ${position === 'right' ? 'right-full top-1/2 -translate-y-1/2 -mr-1' : ''}\n          `} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const HelpModal: React.FC<HelpModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  sections\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        <div className=\"fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75\" onClick={onClose} />\n        \n        <div className=\"inline-block w-full max-w-2xl p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-2xl\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-medium leading-6 text-gray-900\">\n              {title}\n            </h3>\n            <button\n              onClick={onClose}\n              className=\"p-1 rounded-full hover:bg-gray-100 transition-colors\"\n            >\n              <X className=\"w-5 h-5 text-gray-500\" />\n            </button>\n          </div>\n\n          <div className=\"space-y-6\">\n            {sections.map((section, index) => (\n              <div key={index} className=\"border-b border-gray-200 pb-4 last:border-b-0\">\n                <h4 className=\"text-md font-semibold text-gray-800 mb-2 flex items-center\">\n                  <ChevronRight className=\"w-4 h-4 mr-1 text-indigo-600\" />\n                  {section.title}\n                </h4>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  {section.content}\n                </p>\n                {section.examples && (\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <p className=\"text-xs font-semibold text-gray-700 mb-2\">Examples:</p>\n                    <ul className=\"text-xs text-gray-600 space-y-1\">\n                      {section.examples.map((example, idx) => (\n                        <li key={idx} className=\"flex items-start\">\n                          <span className=\"text-indigo-600 mr-2\">‚Ä¢</span>\n                          {example}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n            <button\n              onClick={onClose}\n              className=\"w-full px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 focus-visible:ring-offset-2 transition-colors\"\n            >\n              Got it!\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const HelpButton: React.FC<{\n  onClick: () => void;\n  className?: string;\n}> = ({ onClick, className = '' }) => (\n  <button\n    onClick={onClick}\n    className={`\n      inline-flex items-center p-1 rounded-full text-gray-400 hover:text-indigo-600 hover:bg-indigo-50\n      transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\n      ${className}\n    `}\n    title=\"Get help with this feature\"\n  >\n    <HelpCircle className=\"w-4 h-4\" />\n  </button>\n);\n\n// Predefined help content for common trading concepts\nexport const HELP_CONTENT = {\n  temperature: {\n    title: \"Bot Temperature System\",\n    sections: [\n      {\n        title: \"What is Bot Temperature?\",\n        content: \"Temperature indicates how active or 'hot' a trading pair is based on signal strength and market volatility.\",\n        examples: [\n          \"üî• HOT: Strong signals, high volatility, frequent potential trades\",\n          \"üå°Ô∏è WARM: Moderate signals, some trading activity\",\n          \"‚ùÑÔ∏è COOL: Weak signals, low activity\",\n          \"üßä FROZEN: No significant signals, very quiet\"\n        ]\n      },\n      {\n        title: \"How to Use This Information\",\n        content: \"Hot bots need more attention and may require position size adjustments. Cool bots are stable and require less monitoring.\"\n      }\n    ]\n  },\n  signalScore: {\n    title: \"Signal Scoring System\",\n    sections: [\n      {\n        title: \"Understanding Signal Scores\",\n        content: \"Signal scores range from -1.0 (strong BUY) to +1.0 (strong SELL). The AI combines multiple technical indicators to generate these scores.\",\n        examples: [\n          \"Score < -0.12: Strong BUY signal in choppy markets\",\n          \"Score > +0.12: Strong SELL signal in choppy markets\",\n          \"Score between ¬±0.05: HOLD, no clear direction\"\n        ]\n      },\n      {\n        title: \"Market Regime Impact\",\n        content: \"Trading thresholds adjust based on market conditions. Choppy markets use wider thresholds (¬±0.12) to avoid false signals, while trending markets use tighter thresholds (¬±0.02-0.03).\"\n      }\n    ]\n  },\n  marketRegime: {\n    title: \"Market Regime Analysis\",\n    sections: [\n      {\n        title: \"Regime Types\",\n        content: \"AI analyzes market behavior patterns to classify each trading pair into different regimes.\",\n        examples: [\n          \"STRONG_TRENDING: Clear directional movement, tight thresholds\",\n          \"TRENDING: Moderate directional bias, normal thresholds\",\n          \"CHOPPY: Sideways movement, wide thresholds to avoid noise\",\n          \"VOLATILE: High volatility, special handling required\"\n        ]\n      },\n      {\n        title: \"Trading Implications\",\n        content: \"Each regime triggers different trading strategies and threshold adjustments to optimize performance and reduce false signals.\"\n      }\n    ]\n  }\n};